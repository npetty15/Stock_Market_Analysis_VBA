Sub AllStocksAnalysisRefactored()

'All notes starting with numbers, are my own. All non-numbered notes were pre-populated via the assisgnment instructions
    Dim startTime As Single
    Dim endTime  As Single

    yearValue = InputBox("What year would you like to run the analysis on?")

    startTime = Timer
    
    'Format the output sheet on All Stocks Analysis worksheet
    Worksheets("All Stock Analysis").Activate
    
    Range("A1").Value = "All Stocks (" + yearValue + ")"
    
    'Create a header row
    Cells(3, 1).Value = "Ticker"
    Cells(3, 2).Value = "Total Daily Volume"
    Cells(3, 3).Value = "Return"

    'Initialize array of all tickers
    Dim tickers(12) As String
    
    tickers(0) = "AY"
    tickers(1) = "CSIQ"
    tickers(2) = "DQ"
    tickers(3) = "ENPH"
    tickers(4) = "FSLR"
    tickers(5) = "HASI"
    tickers(6) = "JKS"
    tickers(7) = "RUN"
    tickers(8) = "SEDG"
    tickers(9) = "SPWR"
    tickers(10) = "TERP"
    tickers(11) = "VSLR"
    

    'Activate data worksheet
    Worksheets(yearValue).Activate
    
    'Get the number of rows to loop over
    RowCount = Cells(Rows.Count, "A").End(xlUp).Row
 '###
 'Start of Nick's refactoring of the VBA
 '###
 
'1a) Create a ticker Index

        'setting the index to 0 to reset programming everytime
    tickerIndex = 0
   
'1b) Create three output arrays and data types

        'creating a setting variables with data types
    Dim tickerVolumes(12) As Long
    Dim tickerStartingPrices(12) As Single
    Dim tickerEndingPrices(12) As Single
    
'2a) Create a for loop to initialize the tickerVolumes to zero.
    Worksheets(yearValue).Activate
            
            'setting volume to 0 for each ticker to reset
        For i = 0 To 11
            tickerVolumes(i) = 0
        Next i
        
'2b) Loop over all the rows in the spreadsheet.
            
            'creating a nested for loop to calculate several report needs
        For j = 2 To RowCount
    
'3a) Increase volume for current ticker
                
                'calculating daily volumes column ("B" or (j, 2)) for volume over the selected year
            tickerVolumes(tickerIndex) = tickerVolumes(tickerIndex) + Cells(j, 8).Value
        
'3b) Check if the current row is the first row with the selected tickerIndex.

                'finds starting price, by reviewing the row before the first ticker instance of that stock
            If Cells(j - 1, 1).Value <> tickers(tickerIndex) Then
                tickerStartingPrices(tickerIndex) = Cells(j, 6).Value
            End If
        
'3c) check if the current row is the last row with the selected ticker

                'finds starting price, by reviewing the row after the last ticker instance of that stock
            If Cells(j + 1, 1).Value <> tickers(tickerIndex) Then
                tickerEndingPrices(tickerIndex) = Cells(j, 6).Value

'3d Increase the tickerIndex.

                 ' needed to loop through the tickers
                tickerIndex = tickerIndex + 1
                
             End If
    
         Next j
    
'4) Loop through your arrays to output the Ticker, Total Daily Volume, and Return.

                ' populates report based on the nested for loop and formats it
        For i = 0 To 11
        
            Worksheets("All Stock Analysis").Activate
                Cells(4 + i, 1).Value = tickers(i)
                Cells(4 + i, 2).Value = tickerVolumes(i)
                Cells(4 + i, 3).Value = (tickerEndingPrices(i) / tickerStartingPrices(i)) - 1

        Next i
    
    
'###
'End of Nick's refactoring of the VBA
'###
 
    'Formatting
    Worksheets("All Stock Analysis").Activate
    Range("A3:C3").Font.FontStyle = "Bold"
    Range("A3:C3").Borders(xlEdgeBottom).LineStyle = xlContinuous
    Range("B4:B15").NumberFormat = "#,##0"
    Range("C4:C15").NumberFormat = "0.0%"
    Columns("B").AutoFit

    dataRowStart = 4
    dataRowEnd = 15

    For i = dataRowStart To dataRowEnd
        
        If Cells(i, 3) > 0 Then
            
            Cells(i, 3).Interior.Color = vbGreen
            
        Else
        
            Cells(i, 3).Interior.Color = vbRed
            
        End If
        
    Next i
 
    endTime = Timer
    MsgBox "This code ran in " & (endTime - startTime) & " seconds for the year " & (yearValue)

End Sub